name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  BACKEND_PORT: 3000
  SHELL_PORT: 8082
  PRODUCT_LISTING_PORT: 8081
  SHOPPING_CART_PORT: 8083
  PRODUCT_DETAILS_PORT: 8084
  CHECKOUT_PORT: 8085

jobs:
  # Lint and test all micro-frontends
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        microfrontend: [shell, product-listing, shopping-cart, product-details, checkout]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies for ${{ matrix.microfrontend }}
      run: |
        cd ${{ matrix.microfrontend }}
        npm ci
        
    - name: Run linting for ${{ matrix.microfrontend }}
      run: |
        cd ${{ matrix.microfrontend }}
        npm run lint
        
    - name: Run tests for ${{ matrix.microfrontend }}
      run: |
        cd ${{ matrix.microfrontend }}
        npm test --if-present

  # Build all micro-frontends
  build:
    name: Build Micro-Frontends
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    strategy:
      matrix:
        microfrontend: [shell, product-listing, shopping-cart, product-details, checkout]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies for ${{ matrix.microfrontend }}
      run: |
        cd ${{ matrix.microfrontend }}
        npm ci
        
    - name: Build ${{ matrix.microfrontend }}
      run: |
        cd ${{ matrix.microfrontend }}
        npm run build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.microfrontend }}-build
        path: ${{ matrix.microfrontend }}/dist/

  # Backend testing and building
  backend:
    name: Backend Tests and Build
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
        
    - name: Run backend tests
      run: |
        cd backend
        npm test --if-present
        
    - name: Build backend
      run: |
        cd backend
        npm run build --if-present

  # Integration testing
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build, backend]
    
    services:
      # Start a mock database for testing
      sqlite:
        image: alpine:latest
        options: >-
          --health-cmd "echo 'SQLite service ready'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd backend
        npm ci
        
    - name: Run integration tests
      run: |
        cd backend
        npm run test:integration --if-present
      env:
        NODE_ENV: test
        DATABASE_URL: ':memory:'

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build, backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run npm audit
      run: |
        cd backend
        npm audit --audit-level moderate
        
    - name: Run npm audit for micro-frontends
      run: |
        for dir in shell product-listing shopping-cart product-details checkout; do
          echo "Auditing $dir..."
          cd $dir
          npm audit --audit-level moderate || true
          cd ..
        done

  # Docker build and push (if using containers)
  docker-build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/webshop-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl apply, docker-compose, etc.

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl apply, docker-compose, etc.

  # Performance testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: |
        npm install -g lighthouse
        npm install -g artillery
        
    - name: Run Lighthouse performance tests
      run: |
        lighthouse https://staging.yourapp.com --output=json --output-path=./lighthouse-report.json
        
    - name: Run load tests
      run: |
        artillery run ./performance-tests/load-test.yml
        
    - name: Upload performance reports
      uses: actions/upload-artifact@v4
      with:
        name: performance-reports
        path: |
          lighthouse-report.json
          artillery-report.json 